{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"render.yaml":{"content":"services:\n  - type: web\n    name: apology-app\n    env: node\n    plan: free\n    buildCommand: npm install && npm run build\n    startCommand: npm start\n    envVars:\n      - key: NODE_ENV\n        value: production","size_bytes":210},"replit.md":{"content":"# Apology App - Project Documentation\n\n## Overview\nA fun interactive apology app featuring a monkey mascot that helps users make amends in a playful way. The app includes animations, confetti effects, and an \"apology-o-meter\" to track forgiveness levels.\n\n## Project Architecture\n\n### Frontend (React + TypeScript)\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **Styling**: Tailwind CSS with shadcn/ui components\n- **Animations**: Framer Motion for smooth animations\n- **Effects**: Canvas Confetti for celebration effects\n- **State Management**: React hooks for local state\n\n### Backend (Express + Node.js)\n- **Framework**: Express.js with TypeScript\n- **Database**: In-memory storage (MemStorage) with Drizzle ORM structure\n- **Development**: Vite for development server with HMR\n- **Build**: ESBuild for production bundling\n\n### Key Features\n- Interactive monkey mascot with click animations\n- Rotating apology messages\n- Forgiveness level meter with progress animations\n- Banana rain animation effect\n- Sound effects (optional)\n- Mobile-responsive design\n\n## Recent Changes\n- **2025-01-19**: Migrated from Bolt to Replit\n- **2025-01-19**: Added canvas-confetti dependency\n- **2025-01-19**: Created deployment configuration for Render\n- **2025-01-19**: Set up environment configuration files\n\n## Development Setup\n\n### Local Development\n```bash\nnpm install\nnpm run dev\n```\nThe app runs on port 5000 with both frontend and backend.\n\n### Build for Production\n```bash\nnpm run build\nnpm start\n```\n\n## Deployment\n\n### Render Deployment\n- Uses `render.yaml` configuration\n- Automatically builds and serves the application\n- Environment variables managed through Render dashboard\n\n### Environment Variables\n- `NODE_ENV`: production/development\n- `PORT`: Server port (defaults to 5000)\n- `HOST`: Server host (defaults to 0.0.0.0)\n\n## User Preferences\n- None specified yet\n\n## File Structure\n```\n├── client/                 # Frontend React application\n│   ├── src/\n│   │   └── App.tsx        # Main application component\n│   └── index.html         # HTML template\n├── server/                # Backend Express server\n│   ├── index.ts          # Server entry point\n│   ├── routes.ts         # API routes\n│   ├── storage.ts        # In-memory storage interface\n│   └── vite.ts           # Vite development setup\n├── shared/               # Shared types and schemas\n│   └── schema.ts         # Drizzle schemas and types\n├── package.json          # Dependencies and scripts\n├── render.yaml           # Render deployment config\n└── .env.example          # Environment variables template\n```\n\n## Security Considerations\n- Client/server separation maintained\n- No sensitive data in frontend\n- Environment variables for configuration\n- Input validation with Zod schemas\n\n## Performance Notes\n- Vite for fast development builds\n- ESBuild for optimized production builds\n- Lazy loading and code splitting ready\n- Animations optimized with Framer Motion","size_bytes":3081},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/App.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport confetti from 'canvas-confetti';\nimport { Heart, Download, Volume2, VolumeX } from 'lucide-react';\nimport puppyImage from './assets/images/Cute_puppy_big_eyes_fc38512a.png';\nimport kittenImage from './assets/images/Super_cute_kitten_big_eyes_e78f7189.png';\nimport babyImage from './assets/images/Super_cute_baby_huge_eyes_c7208018.png';\n\nconst apologyMessages = [\n  \"I'm sorry for being a monkey who forgot how much you hate going outside! 🐒\",\n  \"Please forgive this silly banana brain for suggesting outdoor activities! 🍌\",\n  \"I promise to only suggest Netflix and snacks from now on! 📺🍿\",\n  \"My bad for forgetting you're all indoor princesses! 👑\",\n  \"Sorry for being a monkey with no common sense! 🙈\",\n  \"I'll stick to suggesting cozy indoor hangouts only! 🏠❤️\"\n];\n\nconst MonkeyMascot: React.FC<{ onClick: () => void; isClicked: boolean }> = ({ onClick, isClicked }) => (\n  <motion.div\n    className=\"text-8xl cursor-pointer select-none\"\n    onClick={onClick}\n    animate={isClicked ? { \n      scale: [1, 1.2, 1],\n      rotate: [0, -10, 10, 0] \n    } : { \n      y: [0, -10, 0] \n    }}\n    transition={isClicked ? { \n      duration: 0.6 \n    } : { \n      duration: 2, \n      repeat: Infinity, \n      ease: \"easeInOut\" \n    }}\n    whileHover={{ scale: 1.1 }}\n  >\n    🐒\n  </motion.div>\n);\n\nconst ApologyMeter: React.FC<{ level: number }> = ({ level }) => (\n  <motion.div \n    className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg\"\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    transition={{ delay: 0.4 }}\n  >\n    <h3 className=\"text-xl font-bold text-gray-800 mb-4 text-center\">\n      Apology-o-meter 📊\n    </h3>\n    <div className=\"bg-gray-200 rounded-full h-6 overflow-hidden\">\n      <motion.div\n        className=\"bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 h-full flex items-center justify-end pr-2\"\n        initial={{ width: \"0%\" }}\n        animate={{ width: `${level}%` }}\n        transition={{ duration: 2, ease: \"easeOut\" }}\n      >\n        <span className=\"text-white font-bold text-sm\">\n          {level}% Forgiven\n        </span>\n      </motion.div>\n    </div>\n  </motion.div>\n);\n\nconst BananaRain: React.FC = () => {\n  const [bananas, setBananas] = React.useState<Array<{ id: number; left: number; delay: number }>>([]);\n\n  const startBananaRain = () => {\n    const newBananas = Array.from({ length: 20 }, (_, i) => ({\n      id: Date.now() + i,\n      left: Math.random() * 100,\n      delay: Math.random() * 2\n    }));\n    setBananas(newBananas);\n    setTimeout(() => setBananas([]), 3000);\n  };\n\n  React.useEffect(() => {\n    startBananaRain();\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-50\">\n      {bananas.map((banana) => (\n        <motion.div\n          key={banana.id}\n          className=\"absolute text-4xl\"\n          style={{ left: `${banana.left}%` }}\n          initial={{ y: -100, rotate: 0 }}\n          animate={{ y: window.innerHeight + 100, rotate: 360 }}\n          transition={{ \n            duration: 3, \n            delay: banana.delay,\n            ease: \"linear\" \n          }}\n        >\n          🍌\n        </motion.div>\n      ))}\n    </div>\n  );\n};\n\nconst App: React.FC = () => {\n  const [currentMessageIndex, setCurrentMessageIndex] = useState(0);\n  const [forgivenessLevel, setForgivenessLevel] = useState(15);\n  const [isMonkeyClicked, setIsMonkeyClicked] = useState(false);\n  const [currentSection, setCurrentSection] = useState('main');\n  const [showBananaRain, setShowBananaRain] = useState(false);\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [audioContext, setAudioContext] = useState<AudioContext | null>(null);\n\n  // Rotate apology messages\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setCurrentMessageIndex((prev) => (prev + 1) % apologyMessages.length);\n    }, 4000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Initialize audio context on first interaction\n  const initAudioContext = async () => {\n    if (!audioContext) {\n      try {\n        const ctx = new (window.AudioContext || (window as any).webkitAudioContext)();\n        if (ctx.state === 'suspended') {\n          await ctx.resume();\n        }\n        setAudioContext(ctx);\n        return ctx;\n      } catch (error) {\n        console.log('Audio not supported:', error);\n        return null;\n      }\n    }\n    return audioContext;\n  };\n\n  // Play monkey sound\n  const playMonkeySound = async () => {\n    if (!soundEnabled) return;\n    \n    try {\n      const ctx = await initAudioContext();\n      if (!ctx) return;\n\n      // Create \"ooh ooh ah ah\" monkey sound\n      const playTone = (frequency: number, startTime: number, duration: number, volume = 0.2) => {\n        const oscillator = ctx.createOscillator();\n        const gainNode = ctx.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(ctx.destination);\n        \n        oscillator.frequency.setValueAtTime(frequency, startTime);\n        oscillator.type = 'sine';\n        \n        gainNode.gain.setValueAtTime(0, startTime);\n        gainNode.gain.linearRampToValueAtTime(volume, startTime + 0.01);\n        gainNode.gain.linearRampToValueAtTime(0, startTime + duration - 0.01);\n        \n        oscillator.start(startTime);\n        oscillator.stop(startTime + duration);\n      };\n\n      const currentTime = ctx.currentTime;\n      // \"Ooh ooh ah ah\" pattern\n      playTone(400, currentTime, 0.15, 0.3); // ooh\n      playTone(450, currentTime + 0.2, 0.15, 0.3); // ooh\n      playTone(350, currentTime + 0.4, 0.2, 0.25); // ah\n      playTone(380, currentTime + 0.65, 0.2, 0.25); // ah\n      \n    } catch (error) {\n      console.log('Audio playback failed:', error);\n    }\n  };\n\n  const handleMonkeyClick = async () => {\n    setIsMonkeyClicked(true);\n    await playMonkeySound();\n    setTimeout(() => setIsMonkeyClicked(false), 600);\n    \n    if (forgivenessLevel < 90) {\n      setForgivenessLevel(prev => Math.min(prev + 10, 90));\n    }\n  };\n\n  const handleForgiveClick = () => {\n    setForgivenessLevel(100);\n    setShowBananaRain(true);\n    setTimeout(() => setShowBananaRain(false), 3000);\n    \n    // Confetti effect\n    confetti({\n      particleCount: 100,\n      spread: 70,\n      origin: { y: 0.6 },\n      colors: ['#FFD700', '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57']\n    });\n    \n    // Play celebration sound\n    if (soundEnabled) {\n      try {\n        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        const oscillator = audioContext.createOscillator();\n        const gainNode = audioContext.createGain();\n        \n        oscillator.connect(gainNode);\n        gainNode.connect(audioContext.destination);\n        \n        oscillator.frequency.setValueAtTime(523, audioContext.currentTime);\n        oscillator.frequency.setValueAtTime(659, audioContext.currentTime + 0.2);\n        oscillator.frequency.setValueAtTime(784, audioContext.currentTime + 0.4);\n        \n        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.6);\n        \n        oscillator.start(audioContext.currentTime);\n        oscillator.stop(audioContext.currentTime + 0.6);\n      } catch (error) {\n        console.log('Audio not supported');\n      }\n    }\n  };\n\n  const downloadContract = () => {\n    const contractText = `\nMONKEY CONTRACT OF FORGIVENESS\n================================\n\nI, the undersigned monkey 🐒, hereby solemnly swear:\n\n✓ I will NEVER suggest outdoor activities unless there's a special event\n✓ I will always remember you prefer Netflix over nature\n✓ I will suggest cozy indoor hangouts only\n✓ I will provide unlimited virtual bananas as compensation 🍌\n✓ I acknowledge my monkey brain sometimes malfunctions\n\nSigned with monkey paws and banana ink,\nYour Apologetic Monkey Friend\n\nDate: ${new Date().toLocaleDateString()}\nForgiveness Level: ${forgivenessLevel}%\n    `;\n    \n    const blob = new Blob([contractText], { type: 'text/plain' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'Monkey_Forgiveness_Contract.txt';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  };\n\n  const MainSection = () => (\n    <motion.div \n      className=\"min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-black\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Header */}\n        <motion.header \n          className=\"text-center mb-12\"\n          initial={{ y: -50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ duration: 0.8 }}\n        >\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-4\">\n            Sorry Aprajita, Roshni & Sakshi 🙏\n          </h1>\n          <p className=\"text-xl md:text-2xl text-white/90\">\n            A heartfelt apology from your monkey friend\n          </p>\n        </motion.header>\n\n        {/* Sound Toggle */}\n        <motion.button\n          onClick={() => setSoundEnabled(!soundEnabled)}\n          className=\"fixed top-4 right-4 bg-white/20 backdrop-blur-sm rounded-full p-3 text-white hover:bg-white/30 transition-colors z-40\"\n          whileHover={{ scale: 1.1 }}\n          whileTap={{ scale: 0.9 }}\n        >\n          {soundEnabled ? <Volume2 size={24} /> : <VolumeX size={24} />}\n        </motion.button>\n\n        <div className=\"grid lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {/* Left Column - Monkey and Messages */}\n          <div className=\"space-y-8\">\n            {/* Monkey Mascot */}\n            <motion.div \n              className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-lg text-center\"\n              initial={{ x: -100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.2 }}\n            >\n              <MonkeyMascot onClick={handleMonkeyClick} isClicked={isMonkeyClicked} />\n              <p className=\"text-gray-600 mt-4 text-lg\">\n                Click me for monkey sounds! 🎵\n              </p>\n            </motion.div>\n\n            {/* Rotating Messages */}\n            <motion.div \n              className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg\"\n              initial={{ x: -100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.3 }}\n            >\n              <AnimatePresence mode=\"wait\">\n                <motion.p\n                  key={currentMessageIndex}\n                  className=\"text-xl md:text-2xl text-gray-800 text-center font-medium\"\n                  initial={{ opacity: 0, y: 20 }}\n                  animate={{ opacity: 1, y: 0 }}\n                  exit={{ opacity: 0, y: -20 }}\n                  transition={{ duration: 0.5 }}\n                >\n                  {apologyMessages[currentMessageIndex]}\n                </motion.p>\n              </AnimatePresence>\n            </motion.div>\n\n            {/* The Oath */}\n            <motion.div \n              className=\"bg-gradient-to-r from-yellow-200 to-orange-200 rounded-2xl p-6 shadow-lg border-4 border-yellow-400\"\n              initial={{ x: -100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.4 }}\n            >\n              <h3 className=\"text-2xl font-bold text-gray-800 mb-4 text-center\">\n                My Solemn Oath 🤝\n              </h3>\n              <p className=\"text-lg text-gray-700 text-center italic\">\n                \"I promise I will never ask you all to go outside unless there is a special event.\"\n              </p>\n            </motion.div>\n          </div>\n\n          {/* Right Column - Interactive Elements */}\n          <div className=\"space-y-8\">\n            {/* Apology Meter */}\n            <ApologyMeter level={forgivenessLevel} />\n\n            {/* Forgive Button */}\n            <motion.div \n              className=\"text-center\"\n              initial={{ x: 100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.5 }}\n            >\n              <motion.button\n                onClick={handleForgiveClick}\n                className=\"bg-gradient-to-r from-pink-500 to-red-500 text-white font-bold text-xl px-8 py-4 rounded-full shadow-lg hover:from-pink-600 hover:to-red-600 transition-all duration-300 transform hover:scale-105\"\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                disabled={forgivenessLevel === 100}\n              >\n                {forgivenessLevel === 100 ? 'Thank You! 🥺❤️' : 'Forgive Me? 🥺👉👈'}\n              </motion.button>\n              {forgivenessLevel === 100 && (\n                <motion.p \n                  className=\"text-white text-lg mt-4\"\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                >\n                  You're the best friends ever! 🌟\n                </motion.p>\n              )}\n            </motion.div>\n\n            {/* Contract Download */}\n            <motion.div \n              className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg\"\n              initial={{ x: 100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.6 }}\n            >\n              <h3 className=\"text-xl font-bold text-gray-800 mb-4 text-center\">\n                Official Forgiveness Contract 📋\n              </h3>\n              <motion.button\n                onClick={downloadContract}\n                className=\"w-full bg-blue-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-blue-600 transition-colors flex items-center justify-center gap-2\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                <Download size={20} />\n                Download Contract\n              </motion.button>\n            </motion.div>\n\n            {/* Navigation */}\n            <motion.div \n              className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg\"\n              initial={{ x: 100, opacity: 0 }}\n              animate={{ x: 0, opacity: 1 }}\n              transition={{ delay: 0.7 }}\n            >\n              <h3 className=\"text-lg font-bold text-gray-800 mb-4 text-center\">\n                Explore More Apologies\n              </h3>\n              <motion.button\n                onClick={() => setCurrentSection('ideas')}\n                className=\"w-full bg-green-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-600 transition-colors\"\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n              >\n                View Apology Ideas 💡\n              </motion.button>\n            </motion.div>\n          </div>\n        </div>\n\n        {/* Cute Cat for Forgiveness */}\n        <motion.section \n          className=\"mt-16 bg-white/90 backdrop-blur-sm rounded-2xl p-8 shadow-lg max-w-4xl mx-auto text-center\"\n          initial={{ y: 100, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          transition={{ delay: 0.8 }}\n        >\n          <h2 className=\"text-3xl font-bold text-gray-800 mb-6\">\n            Please forgive me? 🥺\n          </h2>\n          <motion.div\n            className=\"mb-6 cursor-pointer select-none inline-block\"\n            animate={{ \n              y: [0, -10, 0],\n              rotate: [0, -5, 5, 0]\n            }}\n            transition={{ \n              duration: 3, \n              repeat: Infinity, \n              ease: \"easeInOut\" \n            }}\n            whileHover={{ scale: 1.1 }}\n            whileTap={{ scale: 0.9 }}\n          >\n            <img \n              src=\"https://images.pexels.com/photos/416160/pexels-photo-416160.jpeg?auto=compress&cs=tinysrgb&w=400\" \n              alt=\"Adorable cat with big eyes making direct eye contact for forgiveness\"\n              className=\"w-48 h-48 object-cover rounded-full shadow-lg mx-auto\"\n            />\n          </motion.div>\n          <p className=\"text-xl text-gray-600 mb-4\">\n            Even this cute cat thinks I should be forgiven! \n          </p>\n          <p className=\"text-lg text-gray-500 italic\">\n            \"Meow meow, forgive the silly monkey!\" - Cat, probably\n          </p>\n        </motion.section>\n      </div>\n      \n      {showBananaRain && <BananaRain />}\n    </motion.div>\n  );\n\n  const ApologyIdeasSection = () => (\n    <motion.div \n      className=\"min-h-screen bg-gradient-to-br from-green-400 via-blue-400 to-purple-400\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      exit={{ opacity: 0 }}\n    >\n      <div className=\"container mx-auto px-4 py-8\">\n        <motion.header \n          className=\"text-center mb-12\"\n          initial={{ y: -50, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n        >\n          <h1 className=\"text-4xl md:text-6xl font-bold text-white mb-4\">\n            Creative Apology Ideas 💡\n          </h1>\n          <motion.button\n            onClick={() => setCurrentSection('main')}\n            className=\"bg-white/20 backdrop-blur-sm text-white px-6 py-2 rounded-full hover:bg-white/30 transition-colors\"\n            whileHover={{ scale: 1.05 }}\n          >\n            ← Back to Main Apology\n          </motion.button>\n        </motion.header>\n\n        <div className=\"grid md:grid-cols-3 gap-6 max-w-6xl mx-auto\">\n          <motion.div\n            className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg text-center\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.2 }}\n            whileHover={{ scale: 1.02, y: -5 }}\n          >\n            <img \n              src={puppyImage} \n              alt=\"Adorable puppy with big eyes\"\n              className=\"w-48 h-48 mx-auto rounded-xl object-cover mb-3\"\n            />\n            <h3 className=\"text-xl font-bold text-gray-800\">🐶 Puppy Eyes</h3>\n            <p className=\"text-lg font-medium text-gray-700 mt-2\">Aprajita</p>\n          </motion.div>\n          \n          <motion.div\n            className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg text-center\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.4 }}\n            whileHover={{ scale: 1.02, y: -5 }}\n          >\n            <img \n              src={kittenImage} \n              alt=\"Adorable kitten with big eyes\"\n              className=\"w-48 h-48 mx-auto rounded-xl object-cover mb-3\"\n            />\n            <h3 className=\"text-xl font-bold text-gray-800\">🐱 Kitten Eyes</h3>\n            <p className=\"text-lg font-medium text-gray-700 mt-2\">Roshni</p>\n          </motion.div>\n\n          <motion.div\n            className=\"bg-white/90 backdrop-blur-sm rounded-2xl p-6 shadow-lg text-center\"\n            initial={{ opacity: 0, y: 50 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: 0.6 }}\n            whileHover={{ scale: 1.02, y: -5 }}\n          >\n            <img \n              src={babyImage} \n              alt=\"Adorable baby with big eyes\"\n              className=\"w-48 h-48 mx-auto rounded-xl object-cover mb-3\"\n            />\n            <h3 className=\"text-xl font-bold text-gray-800\">👶 Baby Eyes</h3>\n            <p className=\"text-lg font-medium text-gray-700 mt-2\">Sakshi</p>\n          </motion.div>\n        </div>\n      </div>\n    </motion.div>\n  );\n\n  return (\n    <div className=\"min-h-screen\">\n      <AnimatePresence mode=\"wait\">\n        {currentSection === 'main' ? (\n          <MainSection key=\"main\" />\n        ) : (\n          <ApologyIdeasSection key=\"ideas\" />\n        )}\n      </AnimatePresence>\n    </div>\n  );\n};\n\nexport default App;","size_bytes":20036},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n","size_bytes":59},"client/src/main.tsx":{"content":"import { StrictMode } from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App.tsx';\nimport './index.css';\n\ncreateRoot(document.getElementById('root')!).render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n","size_bytes":234},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":298}}}